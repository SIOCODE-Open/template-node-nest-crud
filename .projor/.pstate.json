{
  "generatedSource": [
    {
      "filename": ".gitignore",
      "content": "node_modules/\n.env\ndist/",
      "contentHash": "e656a09867789dabeaa9bd039e6f7b5f00092af363290c8e96d25a875f12e3ad",
      "noWriteIfExists": false
    },
    {
      "filename": "docker-compose.yaml",
      "content": "version: '3.8'\nservices:\n    backend:\n        build:\n            context: .\n            dockerfile: Dockerfile\n        ports:\n            - \"3000:3000\"\n        environment:\n            - BACKEND_DB_HOST=db\n            - BACKEND_DB_PORT=5432\n            - BACKEND_DB_USER=backend\n            - BACKEND_DB_PASSWORD=backend\n            - BACKEND_DB_NAME=backend\n        depends_on:\n            - db\n        networks:\n            - backend-network\n    db:\n        image: postgres\n        environment:\n            - POSTGRES_DB=backend\n            - POSTGRES_USER=backend\n            - POSTGRES_PASSWORD=backend\n        networks:\n            - backend-network\n        volumes:\n            - backend-data:/var/lib/postgresql/data\nnetworks:\n    backend-network: {}\nvolumes:\n    backend-data: {}",
      "contentHash": "ba40ce5669cbd120c652a321f09366bc7002d3f0297f1b38651f808b8818807e",
      "noWriteIfExists": false
    },
    {
      "filename": "Dockerfile",
      "content": "FROM node:22\nWORKDIR /app\nADD package.json /app/package.json\nADD tsconfig.json /app/tsconfig.json\nRUN npm install -g @nestjs/cli && npm install\nADD src /app/src\nRUN npm run build\nCMD [\"npm\", \"run\", \"start:prod\"]\nEXPOSE 3000",
      "contentHash": "165533c2a8eca77efb17993d02826684104b25e6505cf526a2709333b9dd24c7",
      "noWriteIfExists": false
    },
    {
      "filename": "ENTITIES.md",
      "content": "# Product\n\nA product in the system\n\n_Attributes_\n\n* Name : `String` - The name of the product\n* Description : `String` - The description of the product, supports Markdown\n\n\n_Associations_\n\n* Manufacturer : `Manufacturer` - The manufacturer of the product\n\n\n# Manufacturer\n\nA manufacturer of products\n\n_Attributes_\n\n* Name : `String` - The name of the manufacturer\n* Description : `String` - The description of the manufacturer, supports Markdown\n* Website : `String` - The URL of the manufacturer's website\n\n\n\n",
      "contentHash": "db4b1aee795bade25220c3e6b8733be310a6a921d80755bf366fd297c0c6c0b3",
      "noWriteIfExists": false
    },
    {
      "filename": "package.json",
      "content": "{\n    \"name\": \"@example/backend\",\n    \"version\": \"0.0.1\",\n    \"description\": \"_You can edit this description in [&#x60;.projor/project.pglobal.yaml&#x60;](.projor/project.pglobal.yaml)_\",\n    \"private\": true,\n    \"scripts\": {\n        \"build\": \"nest build\",\n        \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n        \"start\": \"nest start\",\n        \"start:dev\": \"nest start --watch\",\n        \"start:debug\": \"nest start --debug --watch\",\n        \"start:prod\": \"node dist/main\",\n        \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n        \"test\": \"jest\",\n        \"test:watch\": \"jest --watch\",\n        \"test:cov\": \"jest --coverage\",\n        \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n        \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\n    },\n    \"dependencies\": {\n        \"@nestjs/common\": \"^10.0.0\",\n        \"@nestjs/core\": \"^10.0.0\",\n        \"@nestjs/platform-express\": \"^10.0.0\",\n        \"@nestjs/typeorm\": \"^10.0.2\",\n        \"typeorm\": \"^0.3.20\",\n        \"pg\": \"^8.13.0\",\n        \"reflect-metadata\": \"^0.2.0\",\n        \"rxjs\": \"^7.8.1\"\n    },\n    \"devDependencies\": {\n        \"@nestjs/cli\": \"^10.0.0\",\n        \"@nestjs/schematics\": \"^10.0.0\",\n        \"@nestjs/testing\": \"^10.0.0\",\n        \"@types/express\": \"^4.17.17\",\n        \"@types/jest\": \"^29.5.2\",\n        \"@types/node\": \"^20.3.1\",\n        \"@types/supertest\": \"^6.0.0\",\n        \"@typescript-eslint/eslint-plugin\": \"^8.0.0\",\n        \"@typescript-eslint/parser\": \"^8.0.0\",\n        \"eslint\": \"^8.42.0\",\n        \"eslint-config-prettier\": \"^9.0.0\",\n        \"eslint-plugin-prettier\": \"^5.0.0\",\n        \"jest\": \"^29.5.0\",\n        \"prettier\": \"^3.0.0\",\n        \"source-map-support\": \"^0.5.21\",\n        \"supertest\": \"^7.0.0\",\n        \"ts-jest\": \"^29.1.0\",\n        \"ts-loader\": \"^9.4.3\",\n        \"ts-node\": \"^10.9.1\",\n        \"tsconfig-paths\": \"^4.2.0\",\n        \"typescript\": \"^5.1.3\"\n    },\n    \"jest\": {\n        \"moduleFileExtensions\": [\"js\", \"json\", \"ts\"],\n        \"rootDir\": \"src\",\n        \"testRegex\": \".*\\\\.spec\\\\.ts$\",\n        \"transform\": {\n            \"^.+\\\\.(t|j)s$\": \"ts-jest\"\n        },\n        \"collectCoverageFrom\": [\"**/*.(t|j)s\"],\n        \"coverageDirectory\": \"../coverage\",\n        \"testEnvironment\": \"node\"\n    }\n}\n",
      "contentHash": "e00aa30aaa81667ba0905f3d3a941f615809269088fa46d8506a9109446c909b",
      "noWriteIfExists": false
    },
    {
      "filename": "README.md",
      "content": "# Backend\n\nThis is a template for a [Nest.js](https://docs.nestjs.com/)-based CRUD service. You can customize this template by editing the [`.projor/.entities` file](.projor/.entities), and using [ProJor](https://projor.io) to generate the code.\n\n[Learn more about this template in the `.projor/README.md`](.projor/README.md).\n\n\n## Configuration\n\nYou can change the configuration of the generated backend with the following environment variables:\n\n* `BACKEND_DB_HOST`: The hostname of the database. Defaults to `localhost`.\n* `BACKEND_DB_PORT`: The port of the database. Defaults to `5432`.\n* `BACKEND_DB_USERNAME`: The username to connect to the database. Defaults to `backend_user`.\n* `BACKEND_DB_PASSWORD`: The password to connect to the database. Defaults to `backend_password`.\n* `BACKEND_DB_NAME`: The name of the database. Defaults to `backend`.\n* `PORT`: The port the service listens on. Defaults to `3000`.\n\n## Running\n\nYou can also build & run the generated service with Docker Compose (requires [Docker](https://www.docker.com/get-started)):\n\n```bash\ndocker compose up --build\n```\n\nYou can build and run the generated service with the following commands. This requires [Node.JS](https://nodejs.org/en/) and [Nest.js CLI](https://docs.nestjs.com/first-steps).\n\n```\nnpm install\nnpm run start:dev\n```\n\nYou can build the Docker container of the generated service with the following command (requires [Docker](https://www.docker.com/get-started)):\n\n```bash\ndocker build -t example/backend:latest .\n```\n\n## API\n\n_Authentication_: The generated API request _no authentication_, and allows _any request_ to be made.\n\n### `GET /backend/v1/product`\n\nLists all Product entities.\n\n_Response_\n\n```json\n[\n    {\n        \"id\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"manufacturerId\": \"string\",\n    },\n]\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type {Array<{id: string, name: string, description: string, manufacturerId: string,  }>} */\n  const response = await fetch('http://localhost:3000/backend/v1/product');\n  ```\n\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:3000/backend/v1/product\n  ```\n\n</details>\n\n### `GET /backend/v1/product/{id}`\n\nGets a Product entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, manufacturerId: string,  } } */\n  const response = await fetch('http://localhost:3000/backend/v1/product/{id}');\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:3000/backend/v1/product/{id}\n  ```\n</details>\n\n### `POST /backend/v1/product`\n\nCreates a new Product entity.\n\n_Request Body_\n\n```json\n{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, manufacturerId: string,  } } */\n  const response = await fetch('http://localhost:3000/backend/v1/product', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"manufacturerId\": \"string\",\n    }),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"manufacturerId\": \"string\",\n  }' http://localhost:3000/backend/v1/product\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}`\n\nDeletes a Product entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/product/{id}\n  ```\n</details>\n\n\n### `POST /backend/v1/product/{id}/name`\n\nUpdates the `name` attribute of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/name', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:3000/backend/v1/product/{id}/name\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/name`\n\nClears the `name` attribute of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/name', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/product/{id}/name\n  ```\n</details>\n\n\n### `POST /backend/v1/product/{id}/description`\n\nUpdates the `description` attribute of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/description', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:3000/backend/v1/product/{id}/description\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/description`\n\nClears the `description` attribute of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/description', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/product/{id}/description\n  ```\n</details>\n\n\n\n### `POST /backend/v1/product/{id}/manufacturer`\n\nUpdates the `manufacturer` association of a Product entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Request Body_\n\n```json\n\"string (id of the associated entity)\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/manufacturer', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string (id of the associated entity)\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string (id of the associated entity)\"' http://localhost:3000/backend/v1/product/{id}/manufacturer\n  ```\n</details>\n\n### `DELETE /backend/v1/product/{id}/manufacturer`\n\nClears the `manufacturer` association of a Product entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Product entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/product/{id}/manufacturer', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/product/{id}/manufacturer\n  ```\n</details>\n\n\n### `GET /backend/v1/manufacturer`\n\nLists all Manufacturer entities.\n\n_Response_\n\n```json\n[\n    {\n        \"id\": \"string\",\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"website\": \"string\",\n    },\n]\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type {Array<{id: string, name: string, description: string, website: string,  }>} */\n  const response = await fetch('http://localhost:3000/backend/v1/manufacturer');\n  ```\n\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:3000/backend/v1/manufacturer\n  ```\n\n</details>\n\n### `GET /backend/v1/manufacturer/{id}`\n\nGets a Manufacturer entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, website: string,  } } */\n  const response = await fetch('http://localhost:3000/backend/v1/manufacturer/{id}');\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X GET http://localhost:3000/backend/v1/manufacturer/{id}\n  ```\n</details>\n\n### `POST /backend/v1/manufacturer`\n\nCreates a new Manufacturer entity.\n\n_Request Body_\n\n```json\n{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n_Response_\n\n```json\n{\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n}\n```\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  /** @type { {id: string, name: string, description: string, website: string,  } } */\n  const response = await fetch('http://localhost:3000/backend/v1/manufacturer', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        \"name\": \"string\",\n        \"description\": \"string\",\n        \"website\": \"string\",\n    }),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '{\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"website\": \"string\",\n  }' http://localhost:3000/backend/v1/manufacturer\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}`\n\nDeletes a Manufacturer entity by ID.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/manufacturer/{id}\n  ```\n</details>\n\n\n### `POST /backend/v1/manufacturer/{id}/name`\n\nUpdates the `name` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/name', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:3000/backend/v1/manufacturer/{id}/name\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/name`\n\nClears the `name` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/name', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/manufacturer/{id}/name\n  ```\n</details>\n\n\n### `POST /backend/v1/manufacturer/{id}/description`\n\nUpdates the `description` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/description', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:3000/backend/v1/manufacturer/{id}/description\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/description`\n\nClears the `description` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/description', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/manufacturer/{id}/description\n  ```\n</details>\n\n\n### `POST /backend/v1/manufacturer/{id}/website`\n\nUpdates the `website` attribute of a Manufacturer entity.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Request Body_\n\n```json\n\"string\"\n```\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/website', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(\"string\"),\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '\"string\"' http://localhost:3000/backend/v1/manufacturer/{id}/website\n  ```\n</details>\n\n### `DELETE /backend/v1/manufacturer/{id}/website`\n\nClears the `website` attribute of a Manufacturer entity, setting it to `null`.\n\n_Path Parameters_\n\n- `id` (string): The ID of the Manufacturer entity.\n\n_Response_\n\n_204 No Content_\n\n<details>\n  <summary>JS + fetch</summary>\n  \n  ```js\n  await fetch('http://localhost:3000/backend/v1/manufacturer/{id}/website', {\n    method: 'DELETE',\n  });\n  ```\n</details>\n\n<details>\n  <summary>curl</summary>\n  \n  ```bash\n  curl -X DELETE http://localhost:3000/backend/v1/manufacturer/{id}/website\n  ```\n</details>\n\n\n\n\n## License\n\nThis template is licensed under the [MIT License](LICENSE.md).\n\n[ProJor](https://projor.io) is licensed under either the [ProJor Free License](https://license.projor.io) or the [ProJor Commercial License](https://license.projor.io).",
      "contentHash": "b577333cec3acbc59588a5701990c94d1d7d23d64af85313fd0bf96906cea3de",
      "noWriteIfExists": false
    },
    {
      "filename": "src/app.controller.ts",
      "content": "import { Controller, Get } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getHello(): string {\n        return this.appService.getHello();\n    }\n}\n",
      "contentHash": "4d82b5d0fea5cb87d4baece2b39d47b38f806a29125761c5a9239707381e5c86",
      "noWriteIfExists": false
    },
    {
      "filename": "src/app.module.ts",
      "content": "import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\n\nimport { ProductEntity } from \"./product/product.entity\";\nimport { ProductModule } from \"./product/product.module\";\nimport { ManufacturerEntity } from \"./manufacturer/manufacturer.entity\";\nimport { ManufacturerModule } from \"./manufacturer/manufacturer.module\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forRoot({\n            type: \"postgres\",\n            host: process.env.BACKEND_DB_HOST || \"localhost\",\n            port: parseInt(process.env.BACKEND_DB_PORT || \"5432\", 10),\n            username: process.env.BACKEND_DB_USER || \"postgres\",\n            password: process.env.BACKEND_DB_PASSWORD || \"postgres\",\n            database: process.env.BACKEND_DB_NAME || \"backend\",\n            entities: [ProductEntity, ManufacturerEntity],\n            synchronize: true,\n        }),\n        ProductModule,\n        ManufacturerModule,\n    ],\n    controllers: [],\n    providers: [],\n})\nexport class AppModule {}\n",
      "contentHash": "a8b29ffb21c566b887934207263ac8f6c068fcd663b7621fc7eec3776043276a",
      "noWriteIfExists": false
    },
    {
      "filename": "src/app.service.ts",
      "content": "import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return \"Hello World!\";\n    }\n}\n",
      "contentHash": "43ecf506f9157a903ef9b3b86ca3c97f06f4623bb134ecfa48ac7886a28f725f",
      "noWriteIfExists": false
    },
    {
      "filename": "src/main.ts",
      "content": "import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\n\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n    await app.listen(parseInt(process.env.PORT || \"3000\", 10));\n}\nbootstrap();\n",
      "contentHash": "78110f9754fd794c4660e969cc11be98a191e78b60b12deed7a2b17d96e9baa2",
      "noWriteIfExists": false
    },
    {
      "filename": "src/manufacturer/manufacturer.controller.ts",
      "content": "import {\n    Controller,\n    Get,\n    Req,\n    Post,\n    Delete,\n    Body,\n    Query,\n    Param,\n} from \"@nestjs/common\";\nimport {\n    ManufacturerService,\n    INewManufacturer,\n    IManufacturer,\n} from \"./manufacturer.service\";\n\n@Controller(\"backend/v1/manufacturer\")\nexport class ManufacturerController {\n    constructor(private readonly manufacturerService: ManufacturerService) {}\n\n    @Get()\n    async getAll() {\n        return await this.manufacturerService.listAll();\n    }\n\n    @Post()\n    async create(@Body() newManufacturer: INewManufacturer) {\n        return await this.manufacturerService.create(newManufacturer);\n    }\n\n    @Get(\":id\")\n    async getOne(@Param(\"id\") id: string) {\n        return await this.manufacturerService.getById(id);\n    }\n\n    @Delete(\":id\")\n    async remove(@Param(\"id\") id: string) {\n        return await this.manufacturerService.deleteById(id);\n    }\n\n    @Post(\":id/name\")\n    async updateName(@Param(\"id\") id: string, @Body() name: string) {\n        return await this.manufacturerService.updateName(id, name);\n    }\n\n    @Delete(\":id/name\")\n    async clearName(@Param(\"id\") id: string) {\n        return await this.manufacturerService.clearName(id);\n    }\n    @Post(\":id/description\")\n    async updateDescription(\n        @Param(\"id\") id: string,\n        @Body() description: string\n    ) {\n        return await this.manufacturerService.updateDescription(\n            id,\n            description\n        );\n    }\n\n    @Delete(\":id/description\")\n    async clearDescription(@Param(\"id\") id: string) {\n        return await this.manufacturerService.clearDescription(id);\n    }\n    @Post(\":id/website\")\n    async updateWebsite(@Param(\"id\") id: string, @Body() website: string) {\n        return await this.manufacturerService.updateWebsite(id, website);\n    }\n\n    @Delete(\":id/website\")\n    async clearWebsite(@Param(\"id\") id: string) {\n        return await this.manufacturerService.clearWebsite(id);\n    }\n}\n",
      "contentHash": "b33d35bf783637504dcce0d6f8e32b57546cdbc2ad905118fe373f9843367f02",
      "noWriteIfExists": false
    },
    {
      "filename": "src/manufacturer/manufacturer.entity.ts",
      "content": "import { Entity, Column, PrimaryColumn, ManyToOne, OneToMany } from \"typeorm\";\n\n/** A manufacturer of products */\n@Entity()\nexport class ManufacturerEntity {\n    /** The unique identifier for the entity */\n    @PrimaryColumn()\n    id: string;\n\n    /** The name of the manufacturer */\n    @Column({ type: \"varchar\" })\n    name: string;\n\n    /** The description of the manufacturer, supports Markdown */\n    @Column({ type: \"varchar\" })\n    description: string;\n\n    /** The URL of the manufacturer's website */\n    @Column({ type: \"varchar\" })\n    website: string;\n}\n",
      "contentHash": "c6d86c5cb9fd7cebad4228ca0ed837031b0d0b5f00516e9f47ed096b3a948464",
      "noWriteIfExists": false
    },
    {
      "filename": "src/manufacturer/manufacturer.module.ts",
      "content": "import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ManufacturerEntity } from \"./manufacturer.entity\";\nimport { ManufacturerController } from \"./manufacturer.controller\";\nimport { ManufacturerService } from \"./manufacturer.service\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([ManufacturerEntity])],\n    providers: [ManufacturerService],\n    controllers: [ManufacturerController],\n})\nexport class ManufacturerModule {}\n",
      "contentHash": "905fe1d7435fb2a65942e22a65a9ab73c15c47b35035decffbfaf2fcce78ce97",
      "noWriteIfExists": false
    },
    {
      "filename": "src/manufacturer/manufacturer.service.ts",
      "content": "import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { ManufacturerEntity } from \"./manufacturer.entity\";\n\n/** A manufacturer of products */\nexport interface IManufacturer {\n    id: string;\n    /** The name of the manufacturer */\n    name: string;\n    /** The description of the manufacturer, supports Markdown */\n    description: string;\n    /** The URL of the manufacturer's website */\n    website: string;\n}\n\n/** Create DTO for Manufacturer entities */\nexport interface INewManufacturer {\n    /** The name of the manufacturer */\n    name: string;\n    /** The description of the manufacturer, supports Markdown */\n    description: string;\n    /** The URL of the manufacturer's website */\n    website: string;\n}\n\n// TODO: List\n// TODO: Create\n// TODO: Update per attr\n// TODO: Clear per attr\n// TODO: Update per assoc\n// TODO: Clear per assoc\n\n@Injectable()\nexport class ManufacturerService {\n    constructor(\n        @InjectRepository(ManufacturerEntity)\n        private manufacturerRepository: Repository<ManufacturerEntity>\n    ) {}\n\n    async listAll(): Promise<IManufacturer[]> {\n        const entities = await this.manufacturerRepository.find();\n        return entities.map((entity) => ({\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        }));\n    }\n\n    async getById(id: string): Promise<IManufacturer | null> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            return null;\n        }\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async create(newEntity: INewManufacturer): Promise<IManufacturer> {\n        const entity = {\n            id: `${Date.now()}-${Math.random()}`,\n            name: newEntity.name,\n            description: newEntity.description,\n            website: newEntity.website,\n        };\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async updateName(id: string, name: string): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.name = name;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async clearName(id: string): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.name = null;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n    async updateDescription(\n        id: string,\n        description: string\n    ): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.description = description;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async clearDescription(id: string): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.description = null;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n    async updateWebsite(id: string, website: string): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.website = website;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async clearWebsite(id: string): Promise<IManufacturer> {\n        const entity = await this.manufacturerRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.website = null;\n        await this.manufacturerRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            website: entity.website,\n        };\n    }\n\n    async deleteById(id: string): Promise<void> {\n        await this.manufacturerRepository.delete({ id });\n    }\n}\n",
      "contentHash": "efa176a5f08252f64183f6f7ca285884f47a189a68354be2925747ac01945b4d",
      "noWriteIfExists": false
    },
    {
      "filename": "src/product/product.controller.ts",
      "content": "import {\n    Controller,\n    Get,\n    Req,\n    Post,\n    Delete,\n    Body,\n    Query,\n    Param,\n} from \"@nestjs/common\";\nimport { ProductService, INewProduct, IProduct } from \"./product.service\";\n\n@Controller(\"backend/v1/product\")\nexport class ProductController {\n    constructor(private readonly productService: ProductService) {}\n\n    @Get()\n    async getAll() {\n        return await this.productService.listAll();\n    }\n\n    @Post()\n    async create(@Body() newProduct: INewProduct) {\n        return await this.productService.create(newProduct);\n    }\n\n    @Get(\":id\")\n    async getOne(@Param(\"id\") id: string) {\n        return await this.productService.getById(id);\n    }\n\n    @Delete(\":id\")\n    async remove(@Param(\"id\") id: string) {\n        return await this.productService.deleteById(id);\n    }\n\n    @Post(\":id/name\")\n    async updateName(@Param(\"id\") id: string, @Body() name: string) {\n        return await this.productService.updateName(id, name);\n    }\n\n    @Delete(\":id/name\")\n    async clearName(@Param(\"id\") id: string) {\n        return await this.productService.clearName(id);\n    }\n    @Post(\":id/description\")\n    async updateDescription(\n        @Param(\"id\") id: string,\n        @Body() description: string\n    ) {\n        return await this.productService.updateDescription(id, description);\n    }\n\n    @Delete(\":id/description\")\n    async clearDescription(@Param(\"id\") id: string) {\n        return await this.productService.clearDescription(id);\n    }\n\n    @Post(\":id/manufacturer\")\n    async updateManufacturer(\n        @Param(\"id\") id: string,\n        @Body() manufacturerId: string\n    ) {\n        return await this.productService.updateManufacturer(id, manufacturerId);\n    }\n\n    @Delete(\":id/manufacturer\")\n    async clearManufacturer(@Param(\"id\") id: string) {\n        return await this.productService.clearManufacturer(id);\n    }\n}\n",
      "contentHash": "d67e42cfffbef8e70b762581ab1799842f2d1424e0a015dad8a52756c0a8d287",
      "noWriteIfExists": false
    },
    {
      "filename": "src/product/product.entity.ts",
      "content": "import { Entity, Column, PrimaryColumn, ManyToOne, OneToMany } from \"typeorm\";\n\nimport { ManufacturerEntity as ManufacturerManufacturerEntity } from \"../manufacturer/manufacturer.entity\";\n\n/** A product in the system */\n@Entity()\nexport class ProductEntity {\n    /** The unique identifier for the entity */\n    @PrimaryColumn()\n    id: string;\n\n    /** The name of the product */\n    @Column({ type: \"varchar\" })\n    name: string;\n\n    /** The description of the product, supports Markdown */\n    @Column({ type: \"varchar\" })\n    description: string;\n\n    /** The manufacturer of the product */\n    @ManyToOne(() => ManufacturerManufacturerEntity)\n    manufacturer: ManufacturerManufacturerEntity;\n}\n",
      "contentHash": "0b7a9ad203b683cb47ea2fd2c1df9b25ab7f7d17ce858b43ad8e2112329ee78f",
      "noWriteIfExists": false
    },
    {
      "filename": "src/product/product.module.ts",
      "content": "import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ProductEntity } from \"./product.entity\";\nimport { ProductController } from \"./product.controller\";\nimport { ProductService } from \"./product.service\";\n\nimport { ManufacturerEntity as ManufacturerManufacturerEntity } from \"../manufacturer/manufacturer.entity\";\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([\n            ProductEntity,\n            ManufacturerManufacturerEntity,\n        ]),\n    ],\n    providers: [ProductService],\n    controllers: [ProductController],\n})\nexport class ProductModule {}\n",
      "contentHash": "408b0cd42f68980f236499c9902c1965af6c219a47565ebce42fbfe790daf437",
      "noWriteIfExists": false
    },
    {
      "filename": "src/product/product.service.ts",
      "content": "import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { ProductEntity } from \"./product.entity\";\n\nimport { ManufacturerEntity as ManufacturerManufacturerEntity } from \"../manufacturer/manufacturer.entity\";\n\n/** A product in the system */\nexport interface IProduct {\n    id: string;\n    /** The name of the product */\n    name: string;\n    /** The description of the product, supports Markdown */\n    description: string;\n    /** The manufacturer of the product */\n    manufacturer: string;\n}\n\n/** Create DTO for Product entities */\nexport interface INewProduct {\n    /** The name of the product */\n    name: string;\n    /** The description of the product, supports Markdown */\n    description: string;\n    /** The manufacturer of the product */\n    manufacturer: string;\n}\n\n// TODO: List\n// TODO: Create\n// TODO: Update per attr\n// TODO: Clear per attr\n// TODO: Update per assoc\n// TODO: Clear per assoc\n\n@Injectable()\nexport class ProductService {\n    constructor(\n        @InjectRepository(ProductEntity)\n        private productRepository: Repository<ProductEntity>,\n        @InjectRepository(ManufacturerManufacturerEntity)\n        private manufacturerManufacturerRepository: Repository<ManufacturerManufacturerEntity>\n    ) {}\n\n    async listAll(): Promise<IProduct[]> {\n        const entities = await this.productRepository.find();\n        return entities.map((entity) => ({\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        }));\n    }\n\n    async getById(id: string): Promise<IProduct | null> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            return null;\n        }\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async create(newEntity: INewProduct): Promise<IProduct> {\n        const entity = {\n            id: `${Date.now()}-${Math.random()}`,\n            name: newEntity.name,\n            description: newEntity.description,\n            manufacturer:\n                await this.manufacturerManufacturerRepository.findOneBy({\n                    id: newEntity.manufacturer,\n                }),\n        };\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async updateName(id: string, name: string): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.name = name;\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async clearName(id: string): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.name = null;\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n    async updateDescription(\n        id: string,\n        description: string\n    ): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.description = description;\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async clearDescription(id: string): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.description = null;\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async updateManufacturer(\n        id: string,\n        manufacturerId: string\n    ): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.manufacturer =\n            await this.manufacturerManufacturerRepository.findOneBy({\n                id: manufacturerId,\n            });\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async clearManufacturer(id: string): Promise<IProduct> {\n        const entity = await this.productRepository.findOneBy({ id });\n        if (!entity) {\n            throw new Error(`No entity found with id ${id}`);\n        }\n        entity.manufacturer = null;\n        await this.productRepository.save(entity);\n        return {\n            id: entity.id,\n            name: entity.name,\n            description: entity.description,\n            manufacturer: entity.manufacturer.id,\n        };\n    }\n\n    async deleteById(id: string): Promise<void> {\n        await this.productRepository.delete({ id });\n    }\n}\n",
      "contentHash": "02852494cb92efe68ff3e2be75e83a55ce927aac0013599cd953c0fff44ab59d",
      "noWriteIfExists": false
    },
    {
      "filename": "tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"CommonJS\",\n        \"moduleResolution\": \"Node\",\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"strictNullChecks\": false,\n        \"noImplicitAny\": false,\n        \"strictBindCallApply\": false,\n        \"forceConsistentCasingInFileNames\": false,\n        \"noFallthroughCasesInSwitch\": false,\n        \"declaration\": true,\n        \"outDir\": \"./dist\"\n    },\n    \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "2ad86439a3b6bdacee3cb3536d74f9398e8b0ddf47a4f0185eff2c68fd9d11e1",
      "noWriteIfExists": false
    }
  ]
}